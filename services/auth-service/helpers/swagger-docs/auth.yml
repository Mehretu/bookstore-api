paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: "password123"
                name:
                  type: string
                  example: "John Doe"
                role:
                  type: string
                  enum: [user, admin]
                  default: user
                  example: "user"
                  description: "User role (defaults to 'user' if not specified)"
      responses:
        '200':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '422':
          description: Validation error
        '409':
          description: Email already registered

  /auth/register-service:
    post:
      tags:
        - Authentication
      summary: Register a new service account
      description: Create a new service account (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: service@example.com
                password:
                  type: string
                  format: password
                  example: "servicepass123"
                name:
                  type: string
                  example: "API Service"
      responses:
        '201':
          description: Service account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  service:
                    type: object
                    properties:
                      email:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
        '401':
          description: Unauthorized - Admin access required
        '400':
          description: Bad Request - Missing required fields
        '409':
          description: Conflict - Service account already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and receive access and refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Invalid username or password
        '404':
          description: User not registered

  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: New tokens generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Bad Request - Missing refresh token
        '401':
          description: Invalid refresh token

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate refresh token and logout user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '204':
          description: Successfully logged out
        '400':
          description: Bad Request - Missing refresh token
        '500':
          description: Internal Server Error

  /auth/verify-token:
    post:
      tags:
        - Authentication
      summary: Verify access token
      description: Verify if the access token is valid and return token payload
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: "672c5c560934ef519fb4436b"
                        description: "MongoDB ObjectId of the user"
                      role:
                        type: string
                        example: "user"
                        description: "User's role"
                      iat:
                        type: number
                        example: 1730960504
                        description: "Token issued at timestamp"
                      exp:
                        type: number
                        example: 1730962304
                        description: "Token expiration timestamp"
                      aud:
                        type: string
                        example: "672c5c560934ef519fb4436b"
                        description: "Token audience (user ID)"
                      iss:
                        type: string
                        example: "mehretu.com"
                        description: "Token issuer"
        '401':
          description: Invalid or expired token

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT